<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/AW/Documents/SQlite Projekt/Inlämningsuppgift 1/Inlämningsuppgift 1.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="browser pragmas query structure" current="2"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="150"/><column_width id="3" width="1843"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,6:mainMOVIES"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="CUSTOMERS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="139"/><column index="2" value="122"/><column index="3" value="117"/><column index="4" value="276"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="CUSTOMERS (id INTEGER PRIMARY KEY, first_name TEXT, last_name TEXT, email_address TEXT)" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="MOVIES" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="115"/><column index="2" value="236"/><column index="3" value="99"/><column index="4" value="191"/><column index="5" value="174"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="REGISTER" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="216"/><column index="2" value="61"/><column index="3" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="RENTALS" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="104"/><column index="2" value="138"/><column index="3" value="118"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="STAFF_INFO" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="216"/><column index="2" value="61"/><column index="3" value="122"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="SYSTEM" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="216"/><column index="2" value="61"/><column index="3" value="65"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="sqlite_sequence" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="68"/><column index="2" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="Inlämningsuppgift 1.sql">
DROP TABLE IF EXISTS RENTALS;
DROP TABLE IF EXISTS MOVIES;  
DROP TABLE IF EXISTS STAFF_INFO;  
DROP TABLE IF EXISTS CUSTOMERS;


CREATE TABLE CUSTOMERS (
customer_id INTEGER PRIMARY KEY, 
first_name TEXT, 
last_name TEXT, 
email_address TEXT);

--Denna kod stoppar in information (kunder) i vår nya tabell &quot;customers&quot;. 
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Ricky&quot;, &quot;Bobby&quot;, &quot;assmaster@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Sasha&quot;, &quot;Jelzin&quot;, &quot;fubu@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Sampson&quot;, &quot;Simpson&quot;, &quot;uzispray@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Azamat&quot;, &quot;Bagatov&quot;, &quot;SSR@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Alexander&quot;, &quot;Berg&quot;, &quot;galenfiskare@hotmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Mr&quot;, &quot;Romania&quot;, &quot;lappar@hotmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Ricky&quot;, &quot;Martin&quot;, &quot;rickmaster@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Carlos&quot;, &quot;Slim&quot;, &quot;Slimjim@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Johhny&quot;, &quot;Karate&quot;, &quot;kentucky@gmail.com&quot;);
INSERT INTO CUSTOMERS (first_name, last_name, email_address) VALUES (&quot;Ashy&quot;, &quot;Larry&quot;, &quot;jesusss@gmail.com&quot;);


CREATE TABLE STAFF_INFO (
title TEXT PRIMARY KEY, 
cost INTEGER, 
stock INTEGER
);

INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Pulp Fiction&quot;, 29, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Spirited Away&quot;, 29, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Thunder Thighs&quot;, 10, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Casa De Mi Padre&quot;, 10, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Only God Forgives&quot;, 29, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;The Conjuring&quot;, 10, 10);
INSERT INTO STAFF_INFO (title, cost, stock) VALUES (&quot;Berberian Sound Studio&quot;, 10, 10);


CREATE TABLE MOVIES (
item_code INTEGER PRIMARY KEY, 
cost INTEGER,
title TEXT, 
genre TEXT, 
director TEXT, 
studio TEXT,
FOREIGN KEY (title)
       REFERENCES STAFF_INFO (title) 
	   );

--Denna kod stoppar in information (kunder) i vår nya tabell &quot;customers&quot;. 
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Pulp Fiction&quot;, &quot;Action&quot;, &quot;Quentin Tarantino&quot;, &quot;Miramax&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Spirited Away&quot;, &quot;Anime&quot;, &quot;Hayao Miyazaki&quot;, &quot;Studio Ghibli&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Thunder Thighs&quot;, &quot;Action&quot;, &quot;Peter Gabriel&quot;, &quot;Thunder INC&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Casa De Mi Padre&quot;, &quot;Comedy&quot;, &quot;Will Ferell&quot;, &quot;Whip&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Only God Forgives&quot;, &quot;Action&quot;, &quot;Nicolas Refn&quot;, &quot;Dunno INC&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;The Conjuring&quot;, &quot;Horror&quot;, &quot;Gwen Stefani&quot;, &quot;Glitter Studios&quot;);
INSERT INTO MOVIES (title, genre, director, studio) VALUES (&quot;Berberian Sound Studio&quot;, &quot;Horror&quot;, &quot;Silvio Berlusconi&quot;, &quot;Pasta&quot;);



CREATE TABLE RENTALS (
rental_id INTEGER PRIMARY KEY, 
customer_id INTEGER, 
item_code INTEGER,
FOREIGN KEY (customer_id)
       REFERENCES CUSTOMERS (customer_id)
FOREIGN KEY (item_code)
       REFERENCES MOVIES (item_code) 
	   );
	
--Denna kod skapar en uthyrningssimulering där kunder hyr olika titlar. 
INSERT INTO RENTALS (customer_id, item_code) VALUES (4,6);
INSERT INTO RENTALS (customer_id, item_code) VALUES (8,1);
INSERT INTO RENTALS (customer_id, item_code) VALUES (4,4);
INSERT INTO RENTALS (customer_id, item_code) VALUES (3,1);
INSERT INTO RENTALS (customer_id, item_code) VALUES (7,2);
INSERT INTO RENTALS (customer_id, item_code) VALUES (5,6);
INSERT INTO RENTALS (customer_id, item_code) VALUES (1,2);
INSERT INTO RENTALS (customer_id, item_code) VALUES (2,2);
INSERT INTO RENTALS (customer_id, item_code) VALUES (3,7);
INSERT INTO RENTALS (customer_id, item_code) VALUES (3,4);











</sql><sql name="Querys.sql">--Denna kod skapar en retur-simlureing där våra kunder returnerar olika titlar. 
DELETE FROM RENTALS 
WHERE rental_id = 4;
DELETE FROM RENTALS 
WHERE rental_id = 9;
DELETE FROM RENTALS 
WHERE rental_id = 2;

--Sortera filmer efter din favoritgenre:
SELECT * FROM MOVIES
WHERE genre LIKE &quot;ACTION&quot;;

--Sortera filmer efter din favoritregissör:
SELECT director from MOVIES
WHERE director LIKE &quot;Quentin Tarantino&quot;;

--Kolla vilka filmer som har rea:
SELECT * FROM STAFF_INFO 
WHERE cost &lt; 20;

--Visa hur många exemplar utav en specifik film som är uthyrda.
SELECT * FROM RENTALS
WHERE item_code LIKE 2;

--Visa alla kunder som hyrde en viss film i kartläggning/reklamsyfte. 
SELECT customer_id FROM RENTALS
WHERE item_code LIKE 2;

--Uppdaterar namn på en kolumn från cost till price. 
ALTER TABLE STAFF_INFO
RENAME COLUMN &quot;cost&quot; TO &quot;price&quot;; 

ALTER TABLE STAFF_INFO
RENAME COLUMN &quot;stock&quot; TO &quot;inventory&quot;;

--Uppdaterar namnet på en regissör. 
UPDATE MOVIES 
SET director = &quot;James Wan&quot;
WHERE title LIKE &quot;The Conjuring&quot;;

UPDATE MOVIES 
SET director = &quot;Peter Strickland&quot;
WHERE title LIKE &quot;Berberian Sound Studio&quot;;

--Filtrera filmer efter pris (stigande):
SELECT title, price
FROM STAFF_INFO
ORDER BY price;




</sql><current_tab id="1"/></tab_sql></sqlb_project>
